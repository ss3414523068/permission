<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 包扫描（@Repository/@Service/@Component） -->
    <context:component-scan base-package="*.mapper"/>

    <!-- context开启注解 -->
    <context:annotation-config/>

    <!--************************************************************分割线************************************************************-->

    <!-- 引入配置 -->
    <context:property-placeholder location="classpath:config/application.properties"/>

    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--************************************************************半分割线******************************-->

    <!--
    原生MyBatis配置（新版）
    ①新版只需要在Spring中配置，不需要MyBatis的单独配置文件
    ②Dao/Mapper只写接口，不需要实现类
    ③搭配MyBatis Generator生成通用方法
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="*.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--************************************************************分割线************************************************************-->

    <!-- MD5加密 -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <bean id="RBACRealm" class="com.shiro.RBACRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!-- Shiro的SecurityManager继承了SessionManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="RBACRealm"/>
    </bean>

    <!-- Shiro权限系统 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login/login"/>
        <!-- 不生效，用UnauthorizedException代替 -->
        <!--<property name="unauthorizedUrl" value="/login/noRolePermission"/>-->

        <!--
        shiroFilter拦截链
        ①可代替认证/授权注解
        ②可存放在INI/XML/数据库中
        ③不仅拦截Web Action，也拦截静态资源
        ④anon（Anonymous任何人）/authc（Authentication登录不包括remember me）/user（User包括remember me）

        ⑤不配置默认为anon（首页/+登录/login/**）
        ⑥排序有优先级，/** = authc放最后
        -->
        <property name="filterChainDefinitions">
            <value>
                / = anon
                /login/** = anon
                /doLogout = logout
                /** = authc
            </value>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 必须是JSP？ -->
                <prop key="org.apache.shiro.authz.UnauthorizedException">/login/noRolePermission</prop>
            </props>
        </property>
    </bean>

</beans>
